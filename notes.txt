You use: TRICK 1

int index = ch - 'a';
to convert a character like 'a' to 'z' into an index from 0 to 25.

Why? So you can use an array of size 26 to store frequencies, counts, or flags â€” all without unordered_map overhead.

ðŸŽ¯ Why It Works
Characters in C++ are just numbers (ASCII values):

Character	ASCII Code	'char' - 'a'
'a'	97	0
'b'	98	1
'c'	99	2
...	...	...
'z'	122	25

So when you write ch - 'a', you're doing:

ASCII of ch - ASCII of 'a'
e.g., 'c' - 'a' = 99 - 97 = 2.

ðŸ§ª Practice Example: Count Letters
ðŸ‘‡ Problem: Count frequency of each letter in a string

string s = "apple";
int count[26] = {0};  // 0-based array for a-z

for (char ch : s) {
    count[ch - 'a']++;
}


///// TWO Pointers - pattern

âœ… Pattern 1: Two Pointers with Max Tracking (Water Trapping Type)
Used when decisions depend on previous maximums (like rainwater boundaries or container walls).

ðŸ”¹ Typical Use-Cases:
Trapping Rain Water

Container With Most Water

Max Area Island (with slight BFS/DFS)

Valid Mountain Array

ðŸ”¹ Pattern:
Move left/right based on which side has a smaller value.

Maintain leftMax and rightMax to compute trapped water or bounded values.

ðŸ”¹ Key Insight:
ðŸ‘‰ You canâ€™t just compare current bars, because water depends on max boundaries on both sides.

while (l < r) {
    if (height[l] < height[r]) {
        if (height[l] >= leftMax)
            leftMax = height[l];
        else
            water += leftMax - height[l];
        l++;
    } else {
        if (height[r] >= rightMax)
            rightMax = height[r];
        else
            water += rightMax - height[r];
        r--;
    }
}

âœ… Pattern 2: Simple Two-Pointer Scan (No Max Needed)
Used when you're just looking for pairs, sums, or movement without requiring history.

ðŸ”¹ Typical Use-Cases:
Two Sum II (sorted array)

Valid Palindrome

Merge Two Sorted Arrays

Reverse Vowels of a String

Remove Duplicates

ðŸ”¹ Pattern:
Compare values at l and r, move one or both pointers based on condition.

No need to track max/min values.

while (l < r) {
    int sum = numbers[l] + numbers[r];
    if (sum > target) r--;
    else if (sum < target) l++;
    else return {l + 1, r + 1};
}


Start
  |
  v
Do you need to compare/start from both ends of an array?
  |
  +--> Yes
  |     |
  |     v
  |   Does the result depend on the MAX or BOUNDARY from past values?
  |     |
  |     +--> Yes â†’ Use **Two Pointers + Max Tracking**
  |     |
  |     +--> No  â†’ Use **Simple Two Pointers**
  |
  +--> No
        |
        v
     Are you scanning or adjusting a range/window (subarray)?
        |
        +--> Yes â†’ Use **Sliding Window** or **Two Pointer Window**
        |
        +--> No  â†’ Likely **Linear or Brute Force**
